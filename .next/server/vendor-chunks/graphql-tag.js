/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql-tag";
exports.ids = ["vendor-chunks/graphql-tag"];
exports.modules = {

/***/ "(ssr)/./node_modules/graphql-tag/lib/graphql-tag.umd.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql-tag/lib/graphql-tag.umd.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("(function (global, factory) {\n     true ? factory(exports, __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\"), __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/index.js\")) :\n    0;\n}(this, (function (exports, tslib, graphql) { 'use strict';\n\n    var docCache = new Map();\n    var fragmentSourceMap = new Map();\n    var printFragmentWarnings = true;\n    var experimentalFragmentVariables = false;\n    function normalize(string) {\n        return string.replace(/[\\s,]+/g, ' ').trim();\n    }\n    function cacheKeyFromLoc(loc) {\n        return normalize(loc.source.body.substring(loc.start, loc.end));\n    }\n    function processFragments(ast) {\n        var seenKeys = new Set();\n        var definitions = [];\n        ast.definitions.forEach(function (fragmentDefinition) {\n            if (fragmentDefinition.kind === 'FragmentDefinition') {\n                var fragmentName = fragmentDefinition.name.value;\n                var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n                var sourceKeySet = fragmentSourceMap.get(fragmentName);\n                if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                    if (printFragmentWarnings) {\n                        console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                    }\n                }\n                else if (!sourceKeySet) {\n                    fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n                }\n                sourceKeySet.add(sourceKey);\n                if (!seenKeys.has(sourceKey)) {\n                    seenKeys.add(sourceKey);\n                    definitions.push(fragmentDefinition);\n                }\n            }\n            else {\n                definitions.push(fragmentDefinition);\n            }\n        });\n        return tslib.__assign(tslib.__assign({}, ast), { definitions: definitions });\n    }\n    function stripLoc(doc) {\n        var workSet = new Set(doc.definitions);\n        workSet.forEach(function (node) {\n            if (node.loc)\n                delete node.loc;\n            Object.keys(node).forEach(function (key) {\n                var value = node[key];\n                if (value && typeof value === 'object') {\n                    workSet.add(value);\n                }\n            });\n        });\n        var loc = doc.loc;\n        if (loc) {\n            delete loc.startToken;\n            delete loc.endToken;\n        }\n        return doc;\n    }\n    function parseDocument(source) {\n        var cacheKey = normalize(source);\n        if (!docCache.has(cacheKey)) {\n            var parsed = graphql.parse(source, {\n                experimentalFragmentVariables: experimentalFragmentVariables,\n                allowLegacyFragmentVariables: experimentalFragmentVariables\n            });\n            if (!parsed || parsed.kind !== 'Document') {\n                throw new Error('Not a valid GraphQL document.');\n            }\n            docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n        }\n        return docCache.get(cacheKey);\n    }\n    function gql(literals) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof literals === 'string') {\n            literals = [literals];\n        }\n        var result = literals[0];\n        args.forEach(function (arg, i) {\n            if (arg && arg.kind === 'Document') {\n                result += arg.loc.source.body;\n            }\n            else {\n                result += arg;\n            }\n            result += literals[i + 1];\n        });\n        return parseDocument(result);\n    }\n    function resetCaches() {\n        docCache.clear();\n        fragmentSourceMap.clear();\n    }\n    function disableFragmentWarnings() {\n        printFragmentWarnings = false;\n    }\n    function enableExperimentalFragmentVariables() {\n        experimentalFragmentVariables = true;\n    }\n    function disableExperimentalFragmentVariables() {\n        experimentalFragmentVariables = false;\n    }\n    var extras = {\n        gql: gql,\n        resetCaches: resetCaches,\n        disableFragmentWarnings: disableFragmentWarnings,\n        enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n        disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n    };\n    (function (gql_1) {\n        gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n    })(gql || (gql = {}));\n    gql[\"default\"] = gql;\n    var gql$1 = gql;\n\n    exports.default = gql$1;\n    exports.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n    exports.disableFragmentWarnings = disableFragmentWarnings;\n    exports.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\n    exports.gql = gql;\n    exports.resetCaches = resetCaches;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=graphql-tag.umd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-tag/lib/graphql-tag.umd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-tag/main.js":
/*!******************************************!*\
  !*** ./node_modules/graphql-tag/main.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// For backwards compatibility, make sure require(\"graphql-tag\") returns\n// the gql function, rather than an exports object.\nmodule.exports = __webpack_require__(/*! ./lib/graphql-tag.umd.js */ \"(ssr)/./node_modules/graphql-tag/lib/graphql-tag.umd.js\").gql;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC10YWcvbWFpbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsbUlBQXdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwtdGFnL21haW4uanM/OTc3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIG1ha2Ugc3VyZSByZXF1aXJlKFwiZ3JhcGhxbC10YWdcIikgcmV0dXJuc1xuLy8gdGhlIGdxbCBmdW5jdGlvbiwgcmF0aGVyIHRoYW4gYW4gZXhwb3J0cyBvYmplY3QuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2dyYXBocWwtdGFnLnVtZC5qcycpLmdxbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-tag/main.js\n");

/***/ })

};
;